quarkus.application.name=token-service
quarkus.http.port=8081
quarkus.http.host=0.0.0.0

# Logging (align format with transactions-service)
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.level=INFO

# CORS
quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:3000,http://localhost:8080,http://localhost:8081
quarkus.http.cors.headers=accept, authorization, content-type, x-requested-with
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS

# Camel REST configuration (use Quarkus HTTP)
camel.rest.component=platform-http
camel.rest.bindingMode=json

# Endpoints
keycloak.token.url=http://localhost:8080/realms/finance-app/protocol/openid-connect/token
keycloak.client.id=finance-client
# keycloak.client.secret=   # If client is confidential; leave empty for public client
keycloak.redirect.uri=http://localhost:8081/token
keycloak.client.jwt.private-key=keys/private_key.pem

# keycloak.issuer.url=   # Optional: if set, used as JWT audience
# keycloak.client.jwt.kid=   # Optional: if set, used as JWT kid

transactions.api.url=http://localhost:8082/api/transactions

# Kafka configuration
camel.component.kafka.brokers=localhost:9092
kafka.topic.user-transactions=user-transactions
kafka.publish.endpoint=kafka:user-transactions
kafka.publish.dlq.endpoint=kafka:user-transactions-dlq

# Micrometer / Prometheus
quarkus.micrometer.binder.http-server.enabled=true
quarkus.micrometer.export.prometheus.enabled=true

# Disable Quarkus DevServices Kafka (use docker-compose Kafka instead)
quarkus.kafka.devservices.enabled=false

# Disable Quarkus build analytics prompt in dev mode
quarkus.analytics.disabled=true
